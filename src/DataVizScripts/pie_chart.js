// code from d3 website tutorial to show an example graph that could be created from
// a description of a graph generated by our parser
// this graph is only valid for a specific query to visualize graph description

function pieChart(file) {
    var graphNode = document.getElementById("graph");
    graphNode.innerHTML = '';
    graphNode.innerHTML = '<svg> <g id=\"canvas\"> <g id=\"art\" /> <g id=\"labels\" /> </g> </svg>';
    d3.tsv(file, function (data) {
        data = data.filter(function (d) {
            return d !== data[0]
        });
        data.forEach(function (d) {
            d.name = d.paradigm || d.state;
            d.value = d.nbRepos || d.population;
        });
        data.sort(function (a, b) {
            return b.value - a.value;
        });

        var d3Pie = d3.layout.pie();
        d3Pie.value(function (d) {
            return d.value;
        });
        var pieData = d3Pie(data);

        var svg = d3.select('svg'),
            canvas = d3.select('#canvas'),
            art = d3.select('#art'),
            labels = d3.select('#labels');

        // store our chart dimensions
        var cDim = {
            height: 1000,
            width: 1000,
            innerRadius: 50,
            outerRadius: 200,
            labelRadius: 350
        };

        svg.attr({
            height: cDim.height,
            width: cDim.width
        });

        canvas.attr('transform', 'translate(' + (cDim.width / 2) + ', ' + (cDim.height / 2) + ')');


        var pieArc = d3.svg.arc()
            .innerRadius(cDim.innerRadius)
            .outerRadius(cDim.outerRadius);

        var colors = d3.scale.category20();

        var enteringArcs = art.selectAll('.wedge').data(pieData).enter();
        enteringArcs.append('path')
            .attr('class', 'wedge')
            .attr('d', pieArc)
            .style('fill', function (d, i) {
                return colors(i);
            });


        var enteringLabels = labels.selectAll('.label').data(pieData).enter();
        var labelGroups = enteringLabels.append('g').attr('class', 'label');

        var lines = labelGroups.append('line').attr({
            x1: function (d, i) {
                console.log(pieArc.centroid(d)[0]);
                return pieArc.centroid(d)[0];
            },
            y1: function (d) {
                return pieArc.centroid(d)[1];
            },
            x2: function (d) {
                var centroid = pieArc.centroid(d),
                    midAngle = Math.atan2(centroid[1], centroid[0]);
                return Math.cos(midAngle) * cDim.labelRadius;
            },
            y2: function (d) {
                var centroid = pieArc.centroid(d),
                    midAngle = Math.atan2(centroid[1], centroid[0]);
                return Math.sin(midAngle) * cDim.labelRadius;
            },

            'class': 'label-line',
            'stroke': function (d, i) {
                return colors(i);
            }
        });

        var textLabels = labelGroups.append('text').attr({
            x: function (d, i) {
                var centroid = pieArc.centroid(d),
                    midAngle = Math.atan2(centroid[1], centroid[0]),
                    x = Math.cos(midAngle) * cDim.labelRadius,
                    sign = x > 0 ? 1 : -1;
                return x + (5 * sign);
            },

            y: function (d, i) {
                var centroid = pieArc.centroid(d),
                    midAngle = Math.atan2(centroid[1], centroid[0]),
                    y = Math.sin(midAngle) * cDim.labelRadius;
                return y;
            },

            'text-anchor': function (d, i) {
                var centroid = pieArc.centroid(d),
                    midAngle = Math.atan2(centroid[1], centroid[0]),
                    x = Math.cos(midAngle) * cDim.labelRadius;
                return x > 0 ? 'start' : 'end';
            },

            'class': 'label-text'
        }).text(function (d) {
            return d.data.name;
        });


        // relax the label!
        var alpha = 0.5,
            spacing = 15;

        function relax() {
            var again = false;
            textLabels.each(function (d, i) {
                var a = this,
                    da = d3.select(a),
                    y1 = da.attr('y');
                textLabels.each(function (d, j) {
                    var b = this;
                    if (a === b) {
                        return;
                    }

                    db = d3.select(b);
                    if (da.attr('text-anchor') !== db.attr('text-anchor')) {
                        return;
                    }

                    var y2 = db.attr('y');
                    deltaY = y1 - y2;

                    if (Math.abs(deltaY) > spacing) {
                        return;
                    }

                    again = true;
                    sign = deltaY > 0 ? 1 : -1;
                    var adjust = sign * alpha;
                    da.attr('y', +y1 + adjust);
                    db.attr('y', +y2 - adjust);
                });
            });

            if (again) {
                var labelElements = textLabels[0];
                lines.attr('y2', function (d, i) {
                    var labelForLine = d3.select(labelElements[i]);
                    return labelForLine.attr('y');
                });
                setTimeout(relax, 20);
            }
        }

        relax();
    })
}

